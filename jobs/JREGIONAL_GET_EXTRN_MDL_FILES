#!/bin/bash

#
#-----------------------------------------------------------------------
#
# This script gets either from the system directory or from mass store
# (HPSS) the files generated by the external model (specified by the 
# variable EXTRN_MDL_NAME) for either the initial conditions (ICs) or the
# lateral boundary conditions (LBCs).  Which of these we are considering
# depends on the value of the variable ICS_OR_LBCS, which should be defined
# in the environment (when calling this script from a rocoto workflow, 
# the workflow should define this variable, e.g. using rocoto's <envar> 
# tag).
#
# Note that when we refer to ICs, we are referring to not only the atmospheric 
# fields at the initial time but also various surface fields (which are 
# for now time-independent) as well as the 0-th forecast hour LBCs.  Also, 
# when we refer to LBCs, we are referring to the LBCs excluding the one 
# at the 0-th hour.  
#
#-----------------------------------------------------------------------
#

#
#-----------------------------------------------------------------------
#
# Source the variable definitions file and the bash utility functions.
#
#-----------------------------------------------------------------------
#
. ${GLOBAL_VAR_DEFNS_FP}
. $USHDIR/source_util_funcs.sh
#
#-----------------------------------------------------------------------
#
# Save current shell options (in a global array).  Then set new options
# for this script/function.
#
#-----------------------------------------------------------------------
#
{ save_shell_opts; set -u +x; } > /dev/null 2>&1
#
#-----------------------------------------------------------------------
#
# Get the full path to the file in which this script/function is located 
# (scrfunc_fp), the name of that file (scrfunc_fn), and the directory in
# which the file is located (scrfunc_dir).
#
#-----------------------------------------------------------------------
#
scrfunc_fp=$( $READLINK -f "${BASH_SOURCE[0]}" )
scrfunc_fn=$( basename "${scrfunc_fp}" )
scrfunc_dir=$( dirname "${scrfunc_fp}" )
#
#-----------------------------------------------------------------------
#
# Print message indicating entry into script.
#
#-----------------------------------------------------------------------
#
print_info_msg "
========================================================================
Entering script:  \"${scrfunc_fn}\"
In directory:     \"${scrfunc_dir}\"

This is the J-job script for the task that copies or fetches external
model files from disk, HPSS, or URL, and stages them for downstream use
to generate initial or lateral boundary conditions for the FV3 model.
========================================================================"


#
#-----------------------------------------------------------------------
#
# Check whether the environment variable ICS_OR_LBCS is set to a valid
# value.  This variable specifies whether we are getting the external
# model files for the purpose of generating initial conditions (ICs) or
# lateral boundary condtions (LBCs) for the forecast model.
#
#-----------------------------------------------------------------------
#
valid_vals_ICS_OR_LBCS=( "ICS" "LBCS" )
check_var_valid_value "ICS_OR_LBCS" "valid_vals_ICS_OR_LBCS"
#
#-----------------------------------------------------------------------
#
# Set parameters for grabbing either the initial conditions from analysis or
# forecast files of external models, or the lateral boundary conditions
# from external models. This script has been called to do the work for
# one or the other.
#
#-----------------------------------------------------------------------
#
if [ "${ICS_OR_LBCS}" = "ICS" ]; then
  time_offset_hrs=${EXTRN_MDL_ICS_OFFSET_HRS:-0}
  extrn_mdl_name=${EXTRN_MDL_NAME_ICS}

elif [ "${ICS_OR_LBCS}" = "LBCS" ]; then
  time_offset_hrs=${EXTRN_MDL_LBCS_OFFSET_HRS:-0}
  extrn_mdl_name=${EXTRN_MDL_NAME_LBCS}
fi

#
#-----------------------------------------------------------------------
#
# Set the external model start time
#
#-----------------------------------------------------------------------
#

hh=${CDATE:8:2}
yyyymmdd=${CDATE:0:8}
extrn_mdl_cdate=$( $DATE_UTIL --utc --date "${yyyymmdd} ${hh} UTC - ${time_offset_hrs} hours" "+%Y%m%d%H" )

#
#-----------------------------------------------------------------------
#
# Check whether output files from the specified external model
# (extrn_mdl_name) are available on the specified cycle date and time
# (extrn_mdl_cdate).
#
#-----------------------------------------------------------------------
#

function data_unavailable() {

  local name cdate end_date min_max

  name=$1
  cdate=$2
  end_date=$3
  min_max=$4

  if [ ${min_max} = max ]; then
    msg="\
Output from the specified external model (extrn_mdl_name) is not availa-
ble for the specified cycle date and time (extrn_mdl_cdate) because the latter is
later than the last forecast date and time (cdate_max) with this model:
  extrn_mdl_name = \"${name}\"
  CDATE_max = \"${end_date}\"
  extrn_mdl_cdate = \"${cdate}\""

  elif [ ${min_max} = min ]; then
    msg="\
Output from the specified external model (extrn_mdl_name) is not availa-
ble for the specified cycle date and time (extrn_mdl_cdate) because the latter is
earlier than the implementation date of this model:
  extrn_mdl_name = \"${name}\"
  CDATE_min = \"${end_date}\"
  extrn_mdl_cdate = \"${cdate}\""
  fi

  echo ${msg}
}


case ${extrn_mdl_name} in

"GSMGFS")
# The transition date from the GSMGFS to the FV3GFS was 2019061212, i.e.
# this was the first official forecast with the FV3GFS.  So we set the
# last CDATE for the GSMGFS to the one 6 hours before this.
  cdate_max="2019061206"
  if [ "$extrn_mdl_cdate" -gt "$cdate_max" ]; then
    print_err_msg_exit "\
      $(data_unavailable $extrn_mdl_name $extrn_mdl_cdate $cdate_max max)"
  fi
  ;;

"FV3GFS")
# The transition date from the GSMGFS to the FV3GFS was 2019061212, i.e.
# this was the first official forecast with the FV3GFS.  However, paral-
# lel runs with the FV3GFS go back to 2018121500.  So we set the first 
# extrn_mdl_cdate for the FV3GFS to this date and time.
#  CDATE_min="2019061212"
  CDATE_min="2018121500"
  if [ "$extrn_mdl_cdate" -lt "$CDATE_min" ]; then
    print_err_msg_exit "\
      $(data_unavailable $extrn_mdl_name $extrn_mdl_cdate $cdate_min min)"
  fi
  ;;

"RAP")
# Examination of the HPSS archives shows that the RAPX data goes back to
# July 01, 2015.
  CDATE_min="2015070100"
  if [ "$extrn_mdl_cdate" -lt "$CDATE_min" ]; then
    print_err_msg_exit "\
      $(data_unavailable $extrn_mdl_name $extrn_mdl_cdate $cdate_min min)"
  fi
  ;;

"HRRR")
# From the HRRR home page (https://rapidrefresh.noaa.gov/hrrr), the 
# implementation of the first version of the operational HRRR was 
# September 30, 2014.
  CDATE_min="2014103000"
  if [ "$extrn_mdl_cdate" -lt "$CDATE_min" ]; then
    print_err_msg_exit "\
      $(data_unavailable $extrn_mdl_name $extrn_mdl_cdate $cdate_min min)"
  fi
  ;;

esac
#
#-----------------------------------------------------------------------
#
# Create the directory where the exetrnal model files should be stored
#
#-----------------------------------------------------------------------
#
extrn_mdl_staging_dir="${CYCLE_DIR}/${extrn_mdl_name}/for_${ICS_OR_LBCS}"
mkdir_vrfy -p "${extrn_mdl_staging_dir}"
cd_vrfy "${extrn_mdl_staging_dir}"
#
#-----------------------------------------------------------------------
#
# Call the ex-script for this J-job and pass to it the necessary variables.
#
#-----------------------------------------------------------------------
#
$SCRIPTSDIR/exregional_get_extrn_mdl_files.sh \
  extrn_mdl_cdate="${extrn_mdl_cdate}" \
  extrn_mdl_name="${extrn_mdl_name}" \
  extrn_mdl_staging_dir="${extrn_mdl_staging_dir}" \
  time_offset_hrs=${time_offset_hrs} ||
print_err_msg_exit "\
Call to ex-script corresponding to J-job \"${scrfunc_fn}\" failed."
#
#-----------------------------------------------------------------------
#
# Print exit message.
#
#-----------------------------------------------------------------------
#
print_info_msg "
========================================================================
Exiting script:  \"${scrfunc_fn}\"
In directory:    \"${scrfunc_dir}\"
========================================================================"
#
#-----------------------------------------------------------------------
#
# Restore the shell options saved at the beginning of this script/function.
#
#-----------------------------------------------------------------------
#
{ restore_shell_opts; } > /dev/null 2>&1

