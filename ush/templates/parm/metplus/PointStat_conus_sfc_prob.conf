[config]

# List of applications to run - only PointStat for this case
PROCESS_LIST = PB2NC, PointStat

# time looping - options are INIT, VALID, RETRO, and REALTIME
# If set to INIT or RETRO:
#   INIT_TIME_FMT, INIT_BEG, INIT_END, and INIT_INCREMENT must also be set
# If set to VALID or REALTIME:
#   VALID_TIME_FMT, VALID_BEG, VALID_END, and VALID_INCREMENT must also be set
LOOP_BY = INIT

# Format of INIT_BEG and INIT_END using % items
# %Y = 4 digit year, %m = 2 digit month, %d = 2 digit day, etc.
# see www.strftime.org for more information
# %Y%m%d%H expands to YYYYMMDDHH
INIT_TIME_FMT = %Y%m%d%H 

# Start time for METplus run - must match INIT_TIME_FMT
INIT_BEG = {ENV[CDATE]}

# End time for METplus run - must match INIT_TIME_FMT
INIT_END = {ENV[CDATE]}

# Increment between METplus runs (in seconds if no units are specified)
#  Must be >= 60 seconds
INIT_INCREMENT = 3600

# List of forecast leads to process for each run time (init or valid)
# In hours if units are not specified
# If unset, defaults to 0 (don't loop through forecast leads)
LEAD_SEQ = {ENV[fhr_list]}

# Order of loops to process data - Options are times, processes
# Not relevant if only one item is in the PROCESS_LIST
# times = run all wrappers in the PROCESS_LIST for a single run time, then
#   increment the run time and run all wrappers again until all times have
#   been evaluated.
# processes = run the first wrapper in the PROCESS_LIST for all times
#   specified, then repeat for the next item in the PROCESS_LIST until all
#   wrappers have been run
LOOP_ORDER = times 

# Verbosity of MET output - overrides LOG_VERBOSITY for PointStat only
LOG_POINT_STAT_VERBOSITY = 2

# Location of MET config file to pass to PB2NC
PB2NC_CONFIG_FILE = {PARM_BASE}/met_config/PB2NCConfig_wrapped

# For both PB2NC and point_stat 
OBS_WINDOW_BEGIN = -1799
OBS_WINDOW_END = 1800

PB2NC_WINDOW_BEGIN = {OBS_WINDOW_BEGIN}
PB2NC_WINDOW_END = {OBS_WINDOW_END}

# If set to True, skip run if the output file determined by the output directory and
# filename template already exists
PB2NC_SKIP_IF_OUTPUT_EXISTS = True

# Values to pass to pb2nc config file using environment variables of the same name.
PB2NC_GRID = 
PB2NC_POLY =
PB2NC_STATION_ID =
PB2NC_MESSAGE_TYPE = ADPSFC, ADPUPA
PB2NC_LEVEL_CATEGORY = 0, 1, 4, 5, 6
PB2NC_QUALITY_MARK_THRESH = 9

PB2NC_PB_REPORT_TYPE = 120, 220, 221, 122, 222, 223, 224, 131, 133, 233, 153, 156, 157, 188, 288, 180, 280, 181, 182, 281, 282, 183, 284, 187, 287

# Leave empty to process all
# PB2NC_OBS_BUFR_VAR_LIST = POB, QOB, TOB, ZOB, UOB, VOB, PMO, TOCC, TDO, HOVI, D_DPT, D_WDIR, D_WIND, D_RH, D_MIXR, D_PRMSL
PB2NC_OBS_BUFR_VAR_LIST = PMO, ZOB, TOB, TDO, QOB, UOB, VOB, PWO, TOCC, D_RH, HOVI, CEILING, D_PBL, D_CAPE, MXGS, D_WIND

# Mapping of input BUFR variable names to output variables names.
# The default PREPBUFR map, obs_prepbufr_map, is appended to this map.
PB2NC_MET_CONFIG_OVERRIDES = obs_bufr_map = [{ key = "HOVI"; val = "VIS"; },{ key = "PMO"; val = "PRMSL"; },{ key = "TDO"; val = "DPT"; }, { key = "PWO"; val = "PWAT"; },{ key = "MXGS"; val = "GUST"; }, { key = "CEILING"; val = "CEILING"; }, { key = "TOCC"; val = "TCDC"; }];

# For defining the time periods for summarization
# False for no time summary, True otherwise
# The rest of the PB2NC_TIME_SUMMARY variables are ignored if set to False
PB2NC_TIME_SUMMARY_FLAG = False
PB2NC_TIME_SUMMARY_BEG = 000000
PB2NC_TIME_SUMMARY_END = 235959
PB2NC_TIME_SUMMARY_VAR_NAMES = PMO,TOB,TDO,UOB,VOB,PWO,TOCC
PB2NC_TIME_SUMMARY_TYPES = min, max, range, mean, stdev, median, p80

# Location of MET config file to pass to GridStat
# References PARM_BASE which is the location of the parm directory corresponding
# to the ush directory of the run_metplus.py script that is called
# or the value of the environment variable METPLUS_PARM_BASE if set
POINT_STAT_CONFIG_FILE ={PARM_BASE}/met_config/PointStatConfig_wrapped


#POINT_STAT_OBS_QUALITY_INC = 1, 2, 3
#POINT_STAT_OBS_QUALITY_EXC =

POINT_STAT_CLIMO_MEAN_TIME_INTERP_METHOD = NEAREST
#POINT_STAT_CLIMO_STDEV_TIME_INTERP_METHOD =

#POINT_STAT_INTERP_VLD_THRESH =
#POINT_STAT_INTERP_SHAPE =
POINT_STAT_INTERP_TYPE_METHOD = BILIN
POINT_STAT_INTERP_TYPE_WIDTH = 2

#POINT_STAT_OUTPUT_FLAG_FHO =
#POINT_STAT_OUTPUT_FLAG_CTC =
#POINT_STAT_OUTPUT_FLAG_CTS =
#POINT_STAT_OUTPUT_FLAG_MCTC =
#POINT_STAT_OUTPUT_FLAG_MCTS =
#POINT_STAT_OUTPUT_FLAG_CNT =
#POINT_STAT_OUTPUT_FLAG_SL1L2 =
#POINT_STAT_OUTPUT_FLAG_SAL1L2 =
#POINT_STAT_OUTPUT_FLAG_VL1L2 =
#POINT_STAT_OUTPUT_FLAG_VAL1L2 =
#POINT_STAT_OUTPUT_FLAG_VCNT =
POINT_STAT_OUTPUT_FLAG_PCT = STAT
POINT_STAT_OUTPUT_FLAG_PSTD = STAT
POINT_STAT_OUTPUT_FLAG_PJC = STAT
POINT_STAT_OUTPUT_FLAG_PRC = STAT
#POINT_STAT_OUTPUT_FLAG_ECNT =
#POINT_STAT_OUTPUT_FLAG_RPS =
#POINT_STAT_OUTPUT_FLAG_ECLV =
#POINT_STAT_OUTPUT_FLAG_MPR =
#POINT_STAT_OUTPUT_FLAG_ORANK =

POINT_STAT_CLIMO_CDF_BINS = 1
#POINT_STAT_CLIMO_CDF_CENTER_BINS = False
#POINT_STAT_CLIMO_CDF_WRITE_BINS = True

#POINT_STAT_HSS_EC_VALUE =

# Time relative to each input file's valid time (in seconds if no units are specified) for data within the file to be
# considered valid. Values are set in the 'obs_window' dictionary in the PointStat config file
OBS_POINT_STAT_WINDOW_BEGIN = {OBS_WINDOW_BEGIN}
OBS_POINT_STAT_WINDOW_END = {OBS_WINDOW_END}

# Optional list of offsets to look for point observation data
POINT_STAT_OFFSETS = 0

# Model/fcst and obs name, e.g. GFS, NAM, GDAS, etc.
MODEL = {ENV[MODEL]}_prob

POINT_STAT_DESC = NA
OBTYPE = NDAS

# Regrid to specified grid.  Indicate NONE if no regridding, or the grid id
# (e.g. G212)
POINT_STAT_REGRID_TO_GRID = NONE
POINT_STAT_REGRID_METHOD = BILIN
POINT_STAT_REGRID_WIDTH = 2

POINT_STAT_OUTPUT_PREFIX = {ENV[MODEL]}_ADPSFC_{OBTYPE}_prob

# sets the -obs_valid_beg command line argument (optional)
# not used for this example
#POINT_STAT_OBS_VALID_BEG = {valid?fmt=%Y%m%d_%H}

# sets the -obs_valid_end command line argument (optional)
# not used for this example
#POINT_STAT_OBS_VALID_END = {valid?fmt=%Y%m%d_%H}

# Verification Masking regions
# Indicate which grid and polygon masking region, if applicable
POINT_STAT_GRID =

# List of full path to poly masking files.  NOTE: Only short lists of poly
# files work (those that fit on one line), a long list will result in an
# environment variable that is too long, resulting in an error.  For long
# lists of poly masking files (i.e. all the mask files in the NCEP_mask
# directory), define these in the MET point_stat configuration file.
POINT_STAT_POLY = {MET_INSTALL_DIR}/share/met/poly/CONUS.poly
POINT_STAT_STATION_ID =

# Message types, if all message types are to be returned, leave this empty,
# otherwise indicate the message types of interest.
POINT_STAT_MESSAGE_TYPE = ADPSFC
# Variables and levels as specified in the field dictionary of the MET
# point_stat configuration file. Specify as FCST_VARn_NAME, FCST_VARn_LEVELS,
# (optional) FCST_VARn_OPTION

# set to True to run PointStat once for each name/level combination
# set to False to run PointStat once per run time including all fields
POINT_STAT_ONCE_PER_FIELD = False

# fields to compare
# Note: If FCST_VAR<n>_* is set, then a corresponding OBS_VAR<n>_* variable must be set
# To use one variables for both forecast and observation data, set BOTH_VAR<n>_* instead
FCST_VAR1_NAME = TMP_Z2_ENS_FREQ_ge268
FCST_VAR1_LEVELS = (*,*)
FCST_VAR1_THRESH = ==0.1

OBS_VAR1_NAME = TMP
OBS_VAR1_LEVELS = Z2
OBS_VAR1_THRESH = >=268

FCST_VAR2_NAME = TMP_Z2_ENS_FREQ_ge273
FCST_VAR2_LEVELS = (*,*)
FCST_VAR2_THRESH = ==0.1

OBS_VAR2_NAME = TMP
OBS_VAR2_LEVELS = Z2
OBS_VAR2_THRESH = >=273

FCST_VAR3_NAME = TMP_Z2_ENS_FREQ_ge278
FCST_VAR3_LEVELS = (*,*)
FCST_VAR3_THRESH = ==0.1

OBS_VAR3_NAME = TMP
OBS_VAR3_LEVELS = Z2
OBS_VAR3_THRESH = >=278

FCST_VAR4_NAME = TMP_Z2_ENS_FREQ_ge293
FCST_VAR4_LEVELS = (*,*)
FCST_VAR4_THRESH = ==0.1

OBS_VAR4_NAME = TMP
OBS_VAR4_LEVELS = Z2
OBS_VAR4_THRESH = >=293

FCST_VAR5_NAME = TMP_Z2_ENS_FREQ_ge298
FCST_VAR5_LEVELS = (*,*)
FCST_VAR5_THRESH = ==0.1

OBS_VAR5_NAME = TMP
OBS_VAR5_LEVELS = Z2
OBS_VAR5_THRESH = >=298

FCST_VAR6_NAME = TMP_Z2_ENS_FREQ_ge303
FCST_VAR6_LEVELS = (*,*)
FCST_VAR6_THRESH = ==0.1

OBS_VAR6_NAME = TMP
OBS_VAR6_LEVELS = Z2
OBS_VAR6_THRESH = >=303

FCST_VAR7_NAME = DPT_Z2_ENS_FREQ_ge263
FCST_VAR7_LEVELS = (*,*)
FCST_VAR7_THRESH = ==0.1

OBS_VAR7_NAME = DPT
OBS_VAR7_LEVELS = Z2
OBS_VAR7_THRESH = >=263

FCST_VAR8_NAME = DPT_Z2_ENS_FREQ_ge268
FCST_VAR8_LEVELS = (*,*)
FCST_VAR8_THRESH = ==0.1

OBS_VAR8_NAME = DPT
OBS_VAR8_LEVELS = Z2
OBS_VAR8_THRESH = >=268

FCST_VAR9_NAME = DPT_Z2_ENS_FREQ_ge273
FCST_VAR9_LEVELS = (*,*)
FCST_VAR9_THRESH = ==0.1

OBS_VAR9_NAME = DPT
OBS_VAR9_LEVELS = Z2
OBS_VAR9_THRESH = >=273

FCST_VAR10_NAME = DPT_Z2_ENS_FREQ_ge288
FCST_VAR10_LEVELS = (*,*)
FCST_VAR10_THRESH = ==0.1

OBS_VAR10_NAME = DPT
OBS_VAR10_LEVELS = Z2
OBS_VAR10_THRESH = >=288

FCST_VAR11_NAME = DPT_Z2_ENS_FREQ_ge293
FCST_VAR11_LEVELS = (*,*)
FCST_VAR11_THRESH = ==0.1

OBS_VAR11_NAME = DPT
OBS_VAR11_LEVELS = Z2
OBS_VAR11_THRESH = >=293

FCST_VAR12_NAME = DPT_Z2_ENS_FREQ_ge298
FCST_VAR12_LEVELS = (*,*)
FCST_VAR12_THRESH = ==0.1

OBS_VAR12_NAME = DPT
OBS_VAR12_LEVELS = Z2
OBS_VAR12_THRESH = >=298

FCST_VAR13_NAME = WIND_Z10_ENS_FREQ_ge5
FCST_VAR13_LEVELS = Z10
FCST_VAR13_THRESH = ==0.1

OBS_VAR13_NAME = WIND
OBS_VAR13_LEVELS = Z10
OBS_VAR13_THRESH = >=5

FCST_VAR14_NAME = WIND_Z10_ENS_FREQ_ge10
FCST_VAR14_LEVELS = Z10
FCST_VAR14_THRESH = ==0.1

OBS_VAR14_NAME = WIND
OBS_VAR14_LEVELS = Z10
OBS_VAR14_THRESH = >=10

FCST_VAR15_NAME = WIND_Z10_ENS_FREQ_ge15
FCST_VAR15_LEVELS = Z10
FCST_VAR15_THRESH = ==0.1

OBS_VAR15_NAME = WIND
OBS_VAR15_LEVELS = Z10
OBS_VAR15_THRESH = >=15

FCST_VAR16_NAME = TCDC_L0_ENS_FREQ_lt25
FCST_VAR16_LEVELS = L0
FCST_VAR16_THRESH = ==0.1

OBS_VAR16_NAME = TCDC
OBS_VAR16_LEVELS = L0
OBS_VAR16_THRESH = <25

FCST_VAR17_NAME = TCDC_L0_ENS_FREQ_gt75
FCST_VAR17_LEVELS = L0
FCST_VAR17_THRESH = ==0.1

OBS_VAR17_NAME = TCDC
OBS_VAR17_LEVELS = L0
OBS_VAR17_THRESH = >75

FCST_VAR18_NAME = VIS_L0_ENS_FREQ_lt1609
FCST_VAR18_LEVELS = L0
FCST_VAR18_THRESH = ==0.1
FCST_VAR18_OPTIONS = interp = { type = [ { method = NEAREST; width = 1; } ]; }

OBS_VAR18_NAME = VIS
OBS_VAR18_LEVELS = L0
OBS_VAR18_THRESH = <1609
OBS_VAR18_OPTIONS = interp = { type = [ { method = NEAREST; width = 1; } ]; }

FCST_VAR19_NAME = VIS_L0_ENS_FREQ_lt8045
FCST_VAR19_LEVELS = L0
FCST_VAR19_THRESH = ==0.1
FCST_VAR19_OPTIONS = interp = { type = [ { method = NEAREST; width = 1; } ]; }

OBS_VAR19_NAME = VIS
OBS_VAR19_LEVELS = L0
OBS_VAR19_THRESH = <8045
OBS_VAR19_OPTIONS = interp = { type = [ { method = NEAREST; width = 1; } ]; }

FCST_VAR20_NAME = VIS_L0_ENS_FREQ_ge8045
FCST_VAR20_LEVELS = L0
FCST_VAR20_THRESH = ==0.1
FCST_VAR20_OPTIONS = interp = { type = [ { method = NEAREST; width = 1; } ]; }

OBS_VAR20_NAME = VIS
OBS_VAR20_LEVELS = L0
OBS_VAR20_THRESH = >=8045
OBS_VAR20_OPTIONS = interp = { type = [ { method = NEAREST; width = 1; } ]; }

FCST_VAR21_NAME = HGT_L0_ENS_FREQ_lt152
FCST_VAR21_LEVELS = L0
FCST_VAR21_THRESH = ==0.1
FCST_VAR21_OPTIONS = desc = "CEILING";

OBS_VAR21_NAME = CEILING
OBS_VAR21_LEVELS = L0
OBS_VAR21_THRESH = <152
OBS_VAR21_OPTIONS = GRIB_lvl_typ = 215; interp = { type = [ { method = NEAREST; width = 1; } ]; }

FCST_VAR22_NAME = HGT_L0_ENS_FREQ_lt1520
FCST_VAR22_LEVELS = L0
FCST_VAR22_THRESH = ==0.1
FCST_VAR22_OPTIONS = desc = "CEILING";

OBS_VAR22_NAME = CEILING
OBS_VAR22_LEVELS = L0
OBS_VAR22_THRESH = <1520
OBS_VAR22_OPTIONS = GRIB_lvl_typ = 215; interp = { type = [ { method = NEAREST; width = 1; } ]; }

FCST_VAR23_NAME = HGT_L0_ENS_FREQ_ge914
FCST_VAR23_LEVELS = L0
FCST_VAR23_THRESH = ==0.1
FCST_VAR23_OPTIONS = desc = "CEILING";

OBS_VAR23_NAME = CEILING
OBS_VAR23_LEVELS = L0
OBS_VAR23_THRESH = >=914
OBS_VAR23_OPTIONS = GRIB_lvl_typ = 215; interp = { type = [ { method = NEAREST; width = 1; } ]; }

# Forecast data description variables
FCST_IS_PROB = True
FCST_PROB_IN_GRIB_PDS = False

# End of [config] section and start of [dir] section
[dir]

# directory containing input to PB2NC_INPUT_DIR =  {ENV[OBS_DIR]}
PB2NC_INPUT_DIR =  {ENV[OBS_DIR]}

# directory to write output from 
PB2NC_OUTPUT_DIR = {ENV[EXPTDIR]}/metprd/pb2nc

INPUT_BASE = {ENV[INPUT_BASE]}

FCST_POINT_STAT_INPUT_DIR = {INPUT_BASE}
OBS_POINT_STAT_INPUT_DIR = {PB2NC_OUTPUT_DIR}

# directory containing climatology mean input to PointStat
# Not used in this example
POINT_STAT_CLIMO_MEAN_INPUT_DIR =

# directory containing climatology mean input to PointStat
# Not used in this example
POINT_STAT_CLIMO_STDEV_INPUT_DIR =

OUTPUT_BASE = {ENV[EXPTDIR]}
POINT_STAT_OUTPUT_DIR = {OUTPUT_BASE}

LOG_DIR = {ENV[EXPTDIR]}/log

STAGING_DIR = {OUTPUT_BASE}/stage/conus_sfc_prob

# End of [dir] section and start of [filename_templates] section
[filename_templates]

# Template to look for prepbvur input to PB2NC relative to PB2NC_INPUT_DIR
PB2NC_INPUT_TEMPLATE = prepbufr.ndas.{valid?fmt=%Y%m%d%H}
# Template to use to write output from PB2NC
PB2NC_OUTPUT_TEMPLATE = prepbufr.ndas.{valid?fmt=%Y%m%d%H}.nc

# Template to look for forecast input to PointStat relative to FCST_POINT_STAT_INPUT_DIR
FCST_POINT_STAT_INPUT_TEMPLATE = ensemble_stat_{ENV[MODEL]}_ADPSFC_{OBTYPE}_{valid?fmt=%Y%m%d}_{valid?fmt=%H%M%S}V_ens.nc

# Template to look for observation input to PointStat relative to OBS_POINT_STAT_INPUT_DIR
OBS_POINT_STAT_INPUT_TEMPLATE = prepbufr.ndas.{valid?fmt=%Y%m%d%H}.nc

# Template to look for climatology input to PointStat relative to POINT_STAT_CLIMO_MEAN_INPUT_DIR
# Not used in this example
POINT_STAT_CLIMO_MEAN_INPUT_TEMPLATE =

# Template to look for climatology input to PointStat relative to POINT_STAT_CLIMO_STDEV_INPUT_DIR
# Not used in this example
POINT_STAT_CLIMO_STDEV_INPUT_TEMPLATE =

#Template for where point-stat output is written
POINT_STAT_OUTPUT_TEMPLATE = {init?fmt=%Y%m%d%H}/metprd/ensemble_stat_prob

# Specify the name of the metplus.log file
LOG_METPLUS = {LOG_DIR}/metplus.log.{ENV[LOG_SUFFIX]}_sfc

# Specify where the location and name of the final metplus_final.conf
METPLUS_CONF={OUTPUT_BASE}/{ENV[CDATE]}/metprd/ensemble_stat_prob/metplus_final.conus_surface.conf
