[dir]
# Input and output data directories
PB2NC_INPUT_DIR =  {ENV[OBS_DIR]}
PB2NC_OUTPUT_DIR = {ENV[EXPTDIR]}/{ENV[CDATE]}/metprd/pb2nc

INPUT_BASE = {ENV[EXPTDIR]}/{ENV[CDATE]}/postprd
FCST_POINT_STAT_INPUT_DIR = {INPUT_BASE}

OBS_POINT_STAT_INPUT_DIR = {PB2NC_OUTPUT_DIR}

OUTPUT_BASE = {ENV[EXPTDIR]}
POINT_STAT_OUTPUT_DIR = {OUTPUT_BASE}

LOG_DIR = {OUTPUT_BASE}/log

[filename_templates]
# Template to look for prepbvur input to PB2NC relative to PB2NC_INPUT_DIR
PB2NC_INPUT_TEMPLATE = prepbufr.ndas.{valid?fmt=%Y%m%d%H}
# Template to use to write output from PB2NC
PB2NC_OUTPUT_TEMPLATE = prepbufr.ndas.{valid?fmt=%Y%m%d%H}.nc

# Template to look for forecast/observation input to PointStat relative to FCST_POINT_STAT_INPUT_DIR
FCST_POINT_STAT_INPUT_TEMPLATE = {ENV[NET]}.t{init?fmt=%H}z.bgdawpf{lead?fmt=%HHH}.tm{init?fmt=%H}.grib2
OBS_POINT_STAT_INPUT_TEMPLATE = prepbufr.ndas.{valid?fmt=%Y%m%d%H}.nc

POINT_STAT_OUTPUT_TEMPLATE = {init?fmt=%Y%m%d%H}/metprd/point_stat

[config]

# List of applications to run
PROCESS_LIST = PB2NC, PointStat

# time looping - options are INIT, VALID, RETRO, and REALTIME
LOOP_BY = INIT

# Start time for METplus run
INIT_BEG = {ENV[CDATE]}
# End time for METplus run
INIT_END = {ENV[CDATE]}
# Increment between METplus runs in seconds. Must be > 60
INIT_INCREMENT = 3600
INIT_TIME_FMT = %Y%m%d%H 

# list of forecast leads to process. 
#LEAD_SEQ = begin_end_incr(1,24,1)
LEAD_SEQ = {ENV[fhr_list]}

# Order of loops to process data - Options are times, processes
LOOP_ORDER = times 

# Verbosity of MET output - overrides LOG_VERBOSITY for PointStat only
LOG_POINT_STAT_VERBOSITY = 2

# For both PB2NC and point_stat 
OBS_WINDOW_BEGIN = -1799
OBS_WINDOW_END = 1800

PB2NC_WINDOW_BEGIN = {OBS_WINDOW_BEGIN}
PB2NC_WINDOW_END = {OBS_WINDOW_END}

# Location of MET config file to pass to PB2NC
PB2NC_CONFIG_FILE = {CONFIG_DIR}/PB2NCConfig

# If set to True, skip run if the output file determined by the output directory and
# filename template already exists
PB2NC_SKIP_IF_OUTPUT_EXISTS = True

# Values to pass to pb2nc config file using environment variables of the same name.
PB2NC_GRID = 
PB2NC_POLY =
PB2NC_STATION_ID =
PB2NC_MESSAGE_TYPE = ADPSFC, ADPUPA

# Leave empty to process all
# PB2NC_OBS_BUFR_VAR_LIST = POB, QOB, TOB, ZOB, UOB, VOB, PMO, TOCC, TDO, HOVI, D_DPT, D_WDIR, D_WIND, D_RH, D_MIXR, D_PRMSL
PB2NC_OBS_BUFR_VAR_LIST = PMO, ZOB, TOB, TDO, QOB, UOB, VOB, PWO, TOCC, D_RH, HOVI, CEILING, D_PBL, D_CAPE, MXGS

# For defining the time periods for summarization
# False for no time summary, True otherwise
# The rest of the PB2NC_TIME_SUMMARY variables are ignored if set to False
PB2NC_TIME_SUMMARY_FLAG = False
PB2NC_TIME_SUMMARY_BEG = 000000
PB2NC_TIME_SUMMARY_END = 235959
PB2NC_TIME_SUMMARY_VAR_NAMES = PMO,TOB,TDO,UOB,VOB,PWO,TOCC
PB2NC_TIME_SUMMARY_TYPES = min, max, range, mean, stdev, median, p80

# Location of MET config file to pass to GridStat
# References PARM_BASE which is the location of the parm directory corresponding
# to the ush directory of the master_metplus.py script that is called
# or the value of the environment variable METPLUS_PARM_BASE if set
POINT_STAT_CONFIG_FILE ={CONFIG_DIR}/PointStatConfig

# Model/fcst and obs name, e.g. GFS, NAM, GDAS, etc.
MODEL = {ENV[MODEL]}
OBTYPE = NDAS

# Regrid to specified grid.  Indicate NONE if no regridding, or the grid id
POINT_STAT_REGRID_TO_GRID = NONE

POINT_STAT_OUTPUT_PREFIX = {MODEL}_{OBTYPE}_ADPSFC

# Verification Masking regions
# Indicate which grid and polygon masking region, if applicable
POINT_STAT_GRID = 

# List of full path to poly masking files.  NOTE: Only short lists of poly
# files work (those that fit on one line), a long list will result in an
# environment variable that is too long, resulting in an error.  For long
# lists of poly masking files (i.e. all the mask files in the NCEP_mask
# directory), define these in the MET point_stat configuration file.
POINT_STAT_POLY = {MET_INSTALL_DIR}/share/met/poly/CONUS.poly 
POINT_STAT_STATION_ID =

# Message types, if all message types are to be returned, leave this empty,
# otherwise indicate the message types of interest.
POINT_STAT_MESSAGE_TYPE = ADPSFC

# Variables and levels as specified in the field dictionary of the MET
# point_stat configuration file. Specify as FCST_VARn_NAME, FCST_VARn_LEVELS,
# (optional) FCST_VARn_OPTION
BOTH_VAR1_NAME = TMP
BOTH_VAR1_LEVELS = Z2

BOTH_VAR2_NAME = DPT
BOTH_VAR2_LEVELS = Z2

BOTH_VAR3_NAME = RH 
BOTH_VAR3_LEVELS = Z2

BOTH_VAR4_NAME = UGRD
BOTH_VAR4_LEVELS = Z10
BOTH_VAR4_THRESH = >=2.572 ;; m/s or 5kts

BOTH_VAR5_NAME = VGRD
BOTH_VAR5_LEVELS = Z10
BOTH_VAR5_THRESH = >=2.572 ;; m/s or 5kts

BOTH_VAR6_NAME = PRMSL
BOTH_VAR6_LEVELS = Z0

BOTH_VAR7_NAME = TCDC
BOTH_VAR7_LEVELS = L0
BOTH_VAR7_OPTIONS = GRIB_lvl_typ = 200; interp = { type = [ { method = NEAREST; width = 1; } ]; } 

BOTH_VAR8_NAME = VIS
BOTH_VAR8_LEVELS = L0
BOTH_VAR8_THRESH =  <805, <1609, <4828, <8045 ,>=8045, <16090
BOTH_VAR8_OPTIONS = interp = { type = [ { method = NEAREST; width = 1; } ]; }

BOTH_VAR9_NAME = GUST
BOTH_VAR9_LEVELS = Z0

FCST_VAR10_NAME = HGT
FCST_VAR10_LEVELS = L0
FCST_VAR10_OPTIONS = GRIB_lvl_typ = 215; desc = "CEILING";
FCST_VAR10_THRESH = <152, <305, <914, <1520, <3040, >=914
OBS_VAR10_NAME = CEILING
OBS_VAR10_LEVELS = L0
OBS_VAR10_OPTIONS = GRIB_lvl_typ = 215; interp = { type = [ { method = NEAREST; width = 1; } ]; }
OBS_VAR10_THRESH = <152, <305, <914, <1520, <3040, >=914
